{
  "address": "0x028C0e9baAbEf385971120aD3C66992a2db162FD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_initNotRevealedUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "blacklistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isKycRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint1",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintPublic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_required",
          "type": "bool"
        }
      ],
      "name": "setKycRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_saleActive",
          "type": "bool"
        }
      ],
      "name": "setPresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_saleActive",
          "type": "bool"
        }
      ],
      "name": "setPublicSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdd5f8f4d72f0e3c8d74d8bf38379fb555d272d52e7160dfb2af0d0235c4125a",
  "receipt": {
    "to": null,
    "from": "0xa36bC4cB270B08951469333C1dEd09e07aE0b098",
    "contractAddress": "0x028C0e9baAbEf385971120aD3C66992a2db162FD",
    "transactionIndex": 58,
    "gasUsed": "3473864",
    "logsBloom": "0x
    "blockHash": "0x35ab691b98befc22f1589c94c2f2134d2897b4cbafaf4bd4d2877e3bdd7f6d99",
    "transactionHash": "0xcdd5f8f4d72f0e3c8d74d8bf38379fb555d272d52e7160dfb2af0d0235c4125a",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 10656713,
        "transactionHash": "0xcdd5f8f4d72f0e3c8d74d8bf38379fb555d272d52e7160dfb2af0d0235c4125a",
        "address": "0x028C0e9baAbEf385971120aD3C66992a2db162FD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a36bc4cb270b08951469333c1ded09e07ae0b098"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x35ab691b98befc22f1589c94c2f2134d2897b4cbafaf4bd4d2877e3bdd7f6d99"
      }
    ],
    "blockNumber": 10656713,
    "cumulativeGasUsed": "15502725",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ""
  ],
  "solcInputHash": "d1f152b3d45c18b1fc7ef2d12405ece6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initNotRevealedUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"blacklistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKycRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"setKycRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleActive\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleActive\",\"type\":\"bool\"}],\"name\":\"setPublicSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTiff.sol\":\"NFTiff\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/NFTiff.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// @title: NFTiff\\n// @author: Tiffany Team\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract NFTiff is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n    string private baseURI;\\n    string public baseExtension = \\\".json\\\";\\n    string public notRevealedUri;\\n    uint256 public cost = 30 ether;\\n    uint256 public maxSupply = 500;\\n    uint256 public maxMintAmount = 2;\\n    bool public presaleActive = false;\\n    bool public publicSaleActive = false;\\n    bool public paused = false;\\n    bool public revealed = false;\\n    bool public isKycRequired = true;\\n    address public signer; // signer to make signature\\n    mapping(address => bool) whitelistedAddresses;\\n    mapping(address => bool) blacklistedAddresses;\\n\\n    constructor(string memory _initNotRevealedUri) ERC721(\\\"NFTiff\\\", \\\"NFTiff\\\") {\\n        setNotRevealedURI(_initNotRevealedUri);\\n        signer = msg.sender;\\n    }\\n    \\n    //MODIFIERS\\n    modifier notPaused {\\n         require(!paused, \\\"the contract is paused\\\");\\n         _;\\n    }\\n\\n    modifier notBlacklisted(address user_) {\\n         require(!blacklistedAddresses[user_], \\\"user in blacklist\\\");\\n         _;\\n    }\\n\\n    // INTERNAL\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function presaleValidations(bytes memory _signature) internal view {\\n        require(isWhitelisted(msg.sender), \\\"user is not whitelisted\\\");\\n\\n        if(isKycRequired) {\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"kyc approved\\\", msg.sender));\\n            address signer_ = hash.toEthSignedMessageHash().recover(_signature);\\n            require(signer_ == signer, \\\"Kyc not approved\\\");\\n        }\\n    }\\n\\n    //MINT\\n    function mint1(uint256 _mintAmount, bytes memory _signature) public payable notPaused nonReentrant notBlacklisted(msg.sender) {\\n        require(presaleActive, \\\"Sale has not started yet\\\");\\n        require(msg.value >= cost * _mintAmount, \\\"insufficient funds\\\");\\n        require(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\n        require(_mintAmount <= maxMintAmount,\\\"max mint amount per transaction exceeded\\\");\\n        uint256 supply = totalSupply();\\n        require(supply + _mintAmount <= maxSupply, \\\"max NFT limit exceeded\\\");\\n\\n        presaleValidations(_signature);\\n\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            _safeMint(msg.sender, supply + i);\\n        }\\n    }\\n    \\n    function gift(uint256 _mintAmount, address destination) public onlyOwner {\\n        require(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\n        uint256 supply = totalSupply();\\n        require(supply + _mintAmount <= maxSupply, \\\"max NFT limit exceeded\\\");\\n\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            _safeMint(destination, supply + i);\\n        }\\n    }\\n\\n    //MINT Public\\n    function mintPublic(uint256 _mintAmount) public payable notPaused nonReentrant notBlacklisted(msg.sender) {\\n        require(publicSaleActive, \\\"Sale has not started yet\\\");\\n        require(msg.value >= cost * _mintAmount, \\\"insufficient funds\\\");\\n        require(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\n        require(_mintAmount <= maxMintAmount,\\\"max mint amount per transaction exceeded\\\");\\n        uint256 supply = totalSupply();\\n        require(supply + _mintAmount <= maxSupply, \\\"max NFT limit exceeded\\\");\\n\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\n            _safeMint(msg.sender, supply + i);\\n        }\\n    }\\n\\n    //PUBLIC VIEWS\\n    function isWhitelisted(address _user) public view returns (bool) {\\n        return whitelistedAddresses[_user];\\n    }\\n\\n    function isBlacklisted(address _user) public view returns (bool) {\\n        return blacklistedAddresses[_user];\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        if (!revealed) {\\n            return notRevealedUri;\\n        } else {\\n            string memory currentBaseURI = _baseURI();\\n            return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI,tokenId.toString(), baseExtension)) : \\\"\\\";\\n        }\\n    }\\n\\n    //ONLY OWNER VIEWS\\n    function getBaseURI() public view onlyOwner returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function getContractBalance() public view onlyOwner returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getSigner() public view onlyOwner returns (address) {\\n        return signer;\\n    }\\n\\n    //ONLY OWNER SETTERS\\n    function reveal() public onlyOwner {\\n        revealed = true;\\n    }\\n\\n    function pause(bool _state) public onlyOwner {\\n        paused = _state;\\n    }\\n\\n    function setCost(uint256 _newCost) public onlyOwner {\\n        cost = _newCost;\\n    }\\n\\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n        maxMintAmount = _newmaxMintAmount;\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\\n        baseExtension = _newBaseExtension;\\n    }\\n\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\n        notRevealedUri = _notRevealedURI;\\n    }\\n\\n    function setMaxSupply(uint256 _maxSupply) public onlyOwner {\\n        maxSupply = _maxSupply;\\n    }\\n\\n    function setPresaleStatus(bool _saleActive) public onlyOwner {\\n        presaleActive = _saleActive;\\n    }\\n\\n    function setPublicSaleStatus(bool _saleActive) public onlyOwner {\\n        publicSaleActive = _saleActive;\\n    }\\n\\n    function setKycRequired(bool _required) public onlyOwner {\\n        isKycRequired = _required;\\n    }\\n\\n    function setSigner(address signer_) public onlyOwner {\\n        signer = signer_;\\n    }\\n\\n    function whitelistUsers(address[] memory addresses) public onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            whitelistedAddresses[addresses[i]] = true;\\n        }\\n    }\\n\\n    function blacklistUsers(address[] memory addresses) public onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            blacklistedAddresses[addresses[i]] = true;\\n        }\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\",\"keccak256\":\"0xe27bc6f9418184231fde338be29f4573ad22ab47341ff3e37ecf0f7a37eebc1f\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002891600d9190620001fc565b506801a055690d9db80000600f556101f460105560026011556012805464ffffffffff19166401000000001790553480156200006357600080fd5b5060405162003e5438038062003e5483398101604081905262000086916200031b565b60408051808201825260068082526527232a34b33360d11b602080840182815285518087019096529285528401528151919291620000c791600091620001fc565b508051620000dd906001906020840190620001fc565b505050620000fa620000f46200012e60201b60201c565b62000132565b6001600b556200010a8162000184565b5060128054600160281b600160c81b03191633650100000000000217905562000466565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620001e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b8051620001f890600e906020840190620001fc565b5050565b8280546200020a90620003da565b90600052602060002090601f0160209004810192826200022e576000855562000279565b82601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b6000620002b9620002b3846200037a565b6200035b565b905082815260208101848484011115620002d657620002d6600080fd5b620002e3848285620003a7565b509392505050565b600082601f830112620003015762000301600080fd5b815162000313848260208601620002a2565b949350505050565b600060208284031215620003325762000332600080fd5b81516001600160401b038111156200034d576200034d600080fd5b6200031384828501620002eb565b60006200036760405190565b90506200037582826200040b565b919050565b60006001600160401b0382111562000396576200039662000450565b601f19601f83011660200192915050565b60005b83811015620003c4578181015183820152602001620003aa565b83811115620003d4576000848401525b50505050565b600281046001821680620003ef57607f821691505b602082108114156200040557620004056200043a565b50919050565b601f19601f83011681018181106001600160401b038211171562000433576200043362000450565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6139de80620004766000396000f3fe6080604052600436106103355760003560e01c80636f9fb98a116101ab578063b423fe67116100f7578063da3ef23f11610095578063efd0cbf91161006f578063efd0cbf914610958578063f2c4ce1e1461096b578063f2fde38b1461098b578063fe575a87146109ab57600080fd5b8063da3ef23f146108cf578063e985e9c5146108ef578063edec5f271461093857600080fd5b8063bc8893b4116100d1578063bc8893b414610865578063c668286214610884578063c87b56dd14610899578063d5abeb01146108b957600080fd5b8063b423fe6714610805578063b88d4fde14610825578063bb3d676a1461084557600080fd5b806383a076be116101645780638da5cb5b1161013e5780638da5cb5b1461079d57806395d89b41146107bb578063a22cb465146107d0578063a475b5dd146107f057600080fd5b806383a076be1461074a5780638895283f1461076a5780638b9a10d71461078a57600080fd5b80636f9fb98a146106b657806370a08231146106cb578063714c5398146106eb578063715018a6146107005780637ac3c02f146107155780637f00c7a61461072a57600080fd5b80633af32abf1161028557806351830227116102235780635c975abb116101fd5780635c975abb146106365780636352211e146106565780636c19e783146106765780636f8b44b01461069657600080fd5b806351830227146105db57806353135ca0146105fc57806355f804b31461061657600080fd5b806342842e0e1161025f57806342842e0e1461054e578063438b63001461056e57806344a0d68a1461059b5780634f6ccce7146105bb57600080fd5b80633af32abf146104eb5780633ccfd60b146105245780633e4191dc1461052c57600080fd5b806313faede6116102f2578063238ac933116102cc578063238ac9331461046e578063239c70ae1461049557806323b872dd146104ab5780632f745c59146104cb57600080fd5b806313faede614610416578063150909f71461043957806318160ddd1461045957600080fd5b806301ffc9a71461033a57806302329a291461037057806306fdde0314610392578063081812fc146103b4578063081c8c44146103e1578063095ea7b3146103f6575b600080fd5b34801561034657600080fd5b5061035a6103553660046129d7565b6109e4565b60405161036791906134ce565b60405180910390f35b34801561037c57600080fd5b5061039061038b3660046129b6565b610a0f565b005b34801561039e57600080fd5b506103a7610a5e565b6040516103679190613511565b3480156103c057600080fd5b506103d46103cf366004612a54565b610af0565b604051610367919061346b565b3480156103ed57600080fd5b506103a7610b40565b34801561040257600080fd5b50610390610411366004612948565b610bce565b34801561042257600080fd5b5061042c600f5481565b6040516103679190613722565b34801561044557600080fd5b506103906104543660046129b6565b610c54565b34801561046557600080fd5b5060085461042c565b34801561047a57600080fd5b506012546103d490600160281b90046001600160a01b031681565b3480156104a157600080fd5b5061042c60115481565b3480156104b757600080fd5b506103906104c6366004612846565b610c9e565b3480156104d757600080fd5b5061042c6104e6366004612948565b610ccf565b3480156104f757600080fd5b5061035a6105063660046127e8565b6001600160a01b031660009081526013602052604090205460ff1690565b610390610d21565b34801561053857600080fd5b5060125461035a90640100000000900460ff1681565b34801561055a57600080fd5b50610390610569366004612846565b610db7565b34801561057a57600080fd5b5061058e6105893660046127e8565b610dd2565b60405161036791906134bd565b3480156105a757600080fd5b506103906105b6366004612a54565b610e74565b3480156105c757600080fd5b5061042c6105d6366004612a54565b610ea3565b3480156105e757600080fd5b5060125461035a906301000000900460ff1681565b34801561060857600080fd5b5060125461035a9060ff1681565b34801561062257600080fd5b50610390610631366004612a19565b610ef1565b34801561064257600080fd5b5060125461035a9062010000900460ff1681565b34801561066257600080fd5b506103d4610671366004612a54565b610f32565b34801561068257600080fd5b506103906106913660046127e8565b610f67565b3480156106a257600080fd5b506103906106b1366004612a54565b610fbf565b3480156106c257600080fd5b5061042c610fee565b3480156106d757600080fd5b5061042c6106e63660046127e8565b611020565b3480156106f757600080fd5b506103a7611064565b34801561070c57600080fd5b5061039061109e565b34801561072157600080fd5b506103d46110d4565b34801561073657600080fd5b50610390610745366004612a54565b611118565b34801561075657600080fd5b50610390610765366004612a75565b611147565b34801561077657600080fd5b506103906107853660046129b6565b6111ff565b610390610798366004612a97565b61123c565b3480156107a957600080fd5b50600a546001600160a01b03166103d4565b3480156107c757600080fd5b506103a76113c6565b3480156107dc57600080fd5b506103906107eb366004612915565b6113d5565b3480156107fc57600080fd5b506103906113e0565b34801561081157600080fd5b506103906108203660046129b6565b61141f565b34801561083157600080fd5b50610390610840366004612896565b611463565b34801561085157600080fd5b5061039061086036600461297b565b611495565b34801561087157600080fd5b5060125461035a90610100900460ff1681565b34801561089057600080fd5b506103a7611527565b3480156108a557600080fd5b506103a76108b4366004612a54565b611534565b3480156108c557600080fd5b5061042c60105481565b3480156108db57600080fd5b506103906108ea366004612a19565b611672565b3480156108fb57600080fd5b5061035a61090a366004612809565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561094457600080fd5b5061039061095336600461297b565b6116af565b610390610966366004612a54565b611741565b34801561097757600080fd5b50610390610986366004612a19565b6118c6565b34801561099757600080fd5b506103906109a63660046127e8565b611903565b3480156109b757600080fd5b5061035a6109c63660046127e8565b6001600160a01b031660009081526014602052604090205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610a095750610a098261195c565b92915050565b600a546001600160a01b03163314610a425760405162461bcd60e51b8152600401610a3990613662565b60405180910390fd5b60128054911515620100000262ff000019909216919091179055565b606060008054610a6d90613841565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990613841565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b245760405162461bcd60e51b8152600401610a3990613652565b506000908152600460205260409020546001600160a01b031690565b600e8054610b4d90613841565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7990613841565b8015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bd982610f32565b9050806001600160a01b0316836001600160a01b03161415610c0d5760405162461bcd60e51b8152600401610a3990613692565b336001600160a01b0382161480610c295750610c29813361090a565b610c455760405162461bcd60e51b8152600401610a39906135f2565b610c4f83836119ac565b505050565b600a546001600160a01b03163314610c7e5760405162461bcd60e51b8152600401610a3990613662565b601280549115156401000000000264ff0000000019909216919091179055565b610ca83382611a1a565b610cc45760405162461bcd60e51b8152600401610a39906136b2565b610c4f838383611acc565b6000610cda83611020565b8210610cf85760405162461bcd60e51b8152600401610a3990613552565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610d4b5760405162461bcd60e51b8152600401610a3990613662565b6000336001600160a01b031647604051610d6490613463565b60006040518083038185875af1925050503d8060008114610da1576040519150601f19603f3d011682016040523d82523d6000602084013e610da6565b606091505b5050905080610db457600080fd5b50565b610c4f83838360405180602001604052806000815250611463565b60606000610ddf83611020565b905060008167ffffffffffffffff811115610dfc57610dfc613960565b604051908082528060200260200182016040528015610e25578160200160208202803683370190505b50905060005b82811015610e6c57610e3d8582610ccf565b828281518110610e4f57610e4f61394a565b602090810291909101015280610e648161389b565b915050610e2b565b509392505050565b600a546001600160a01b03163314610e9e5760405162461bcd60e51b8152600401610a3990613662565b600f55565b6000610eae60085490565b8210610ecc5760405162461bcd60e51b8152600401610a39906136c2565b60088281548110610edf57610edf61394a565b90600052602060002001549050919050565b600a546001600160a01b03163314610f1b5760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600c906020840190612631565b5050565b6000818152600260205260408120546001600160a01b031680610a095760405162461bcd60e51b8152600401610a3990613612565b600a546001600160a01b03163314610f915760405162461bcd60e51b8152600401610a3990613662565b601280546001600160a01b03909216600160281b0265010000000000600160c81b0319909216919091179055565b600a546001600160a01b03163314610fe95760405162461bcd60e51b8152600401610a3990613662565b601055565b600a546000906001600160a01b0316331461101b5760405162461bcd60e51b8152600401610a3990613662565b504790565b60006001600160a01b0382166110485760405162461bcd60e51b8152600401610a3990613602565b506001600160a01b031660009081526003602052604090205490565b600a546060906001600160a01b031633146110915760405162461bcd60e51b8152600401610a3990613662565b600c8054610a6d90613841565b600a546001600160a01b031633146110c85760405162461bcd60e51b8152600401610a3990613662565b6110d26000611bf9565b565b600a546000906001600160a01b031633146111015760405162461bcd60e51b8152600401610a3990613662565b50601254600160281b90046001600160a01b031690565b600a546001600160a01b031633146111425760405162461bcd60e51b8152600401610a3990613662565b601155565b600a546001600160a01b031633146111715760405162461bcd60e51b8152600401610a3990613662565b600082116111915760405162461bcd60e51b8152600401610a3990613712565b600061119c60085490565b6010549091506111ac8483613796565b11156111ca5760405162461bcd60e51b8152600401610a3990613622565b60015b8381116111f9576111e7836111e28385613796565b611c4b565b806111f18161389b565b9150506111cd565b50505050565b600a546001600160a01b031633146112295760405162461bcd60e51b8152600401610a3990613662565b6012805460ff1916911515919091179055565b60125462010000900460ff16156112655760405162461bcd60e51b8152600401610a3990613672565b6002600b5414156112885760405162461bcd60e51b8152600401610a3990613702565b6002600b553360008181526014602052604090205460ff16156112bd5760405162461bcd60e51b8152600401610a39906136e2565b60125460ff166112df5760405162461bcd60e51b8152600401610a3990613532565b82600f546112ed91906137c2565b34101561130c5760405162461bcd60e51b8152600401610a39906136a2565b6000831161132c5760405162461bcd60e51b8152600401610a3990613712565b60115483111561134e5760405162461bcd60e51b8152600401610a39906135d2565b600061135960085490565b6010549091506113698583613796565b11156113875760405162461bcd60e51b8152600401610a3990613622565b61139083611c65565b60015b8481116113ba576113a8336111e28385613796565b806113b28161389b565b915050611393565b50506001600b55505050565b606060018054610a6d90613841565b610f2e338383611d1e565b600a546001600160a01b0316331461140a5760405162461bcd60e51b8152600401610a3990613662565b6012805463ff00000019166301000000179055565b600a546001600160a01b031633146114495760405162461bcd60e51b8152600401610a3990613662565b601280549115156101000261ff0019909216919091179055565b61146d3383611a1a565b6114895760405162461bcd60e51b8152600401610a39906136b2565b6111f984848484611dc1565b600a546001600160a01b031633146114bf5760405162461bcd60e51b8152600401610a3990613662565b60005b8151811015610f2e576001601460008484815181106114e3576114e361394a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061151f8161389b565b9150506114c2565b600d8054610b4d90613841565b6000818152600260205260409020546060906001600160a01b031661156b5760405162461bcd60e51b8152600401610a3990613682565b6012546301000000900460ff1661160e57600e805461158990613841565b80601f01602080910402602001604051908101604052809291908181526020018280546115b590613841565b80156116025780601f106115d757610100808354040283529160200191611602565b820191906000526020600020905b8154815290600101906020018083116115e557829003601f168201915b50505050509050919050565b6000611618611df4565b905060008151116116385760405180602001604052806000815250611666565b8061164284611e03565b600d604051602001611656939291906133d1565b6040516020818303038152906040525b9392505050565b919050565b600a546001600160a01b0316331461169c5760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600d906020840190612631565b600a546001600160a01b031633146116d95760405162461bcd60e51b8152600401610a3990613662565b60005b8151811015610f2e576001601360008484815181106116fd576116fd61394a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806117398161389b565b9150506116dc565b60125462010000900460ff161561176a5760405162461bcd60e51b8152600401610a3990613672565b6002600b54141561178d5760405162461bcd60e51b8152600401610a3990613702565b6002600b553360008181526014602052604090205460ff16156117c25760405162461bcd60e51b8152600401610a39906136e2565b601254610100900460ff166117e95760405162461bcd60e51b8152600401610a3990613532565b81600f546117f791906137c2565b3410156118165760405162461bcd60e51b8152600401610a39906136a2565b600082116118365760405162461bcd60e51b8152600401610a3990613712565b6011548211156118585760405162461bcd60e51b8152600401610a39906135d2565b600061186360085490565b6010549091506118738483613796565b11156118915760405162461bcd60e51b8152600401610a3990613622565b60015b8381116118bb576118a9336111e28385613796565b806118b38161389b565b915050611894565b50506001600b555050565b600a546001600160a01b031633146118f05760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600e906020840190612631565b600a546001600160a01b0316331461192d5760405162461bcd60e51b8152600401610a3990613662565b6001600160a01b0381166119535760405162461bcd60e51b8152600401610a3990613572565b610db481611bf9565b60006001600160e01b031982166380ac58cd60e01b148061198d57506001600160e01b03198216635b5e139f60e01b145b80610a0957506301ffc9a760e01b6001600160e01b0319831614610a09565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119e182610f32565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a4e5760405162461bcd60e51b8152600401610a39906135e2565b6000611a5983610f32565b9050806001600160a01b0316846001600160a01b03161480611a945750836001600160a01b0316611a8984610af0565b6001600160a01b0316145b80611ac457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611adf82610f32565b6001600160a01b031614611b055760405162461bcd60e51b8152600401610a3990613582565b6001600160a01b038216611b2b5760405162461bcd60e51b8152600401610a39906135a2565b611b36838383611f01565b611b416000826119ac565b6001600160a01b0383166000908152600360205260408120805460019290611b6a9084906137e1565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b98908490613796565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610f2e828260405180602001604052806000815250611fb9565b3360009081526013602052604090205460ff16611c945760405162461bcd60e51b8152600401610a39906136f2565b601254640100000000900460ff1615610db457600033604051602001611cba9190613439565b6040516020818303038152906040528051906020012090506000611ce783611ce184611fec565b9061201c565b6012549091506001600160a01b03808316600160281b9092041614610c4f5760405162461bcd60e51b8152600401610a39906136d2565b816001600160a01b0316836001600160a01b03161415611d505760405162461bcd60e51b8152600401610a39906135b2565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611db49085906134ce565b60405180910390a3505050565b611dcc848484611acc565b611dd884848484612038565b6111f95760405162461bcd60e51b8152600401610a3990613562565b6060600c8054610a6d90613841565b606081611e275750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e515780611e3b8161389b565b9150611e4a9050600a836137ae565b9150611e2b565b60008167ffffffffffffffff811115611e6c57611e6c613960565b6040519080825280601f01601f191660200182016040528015611e96576020820181803683370190505b5090505b8415611ac457611eab6001836137e1565b9150611eb8600a866138c8565b611ec3906030613796565b60f81b818381518110611ed857611ed861394a565b60200101906001600160f81b031916908160001a905350611efa600a866137ae565b9450611e9a565b6001600160a01b038316611f5c57611f5781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611f7f565b816001600160a01b0316836001600160a01b031614611f7f57611f7f8382612145565b6001600160a01b038216611f9657610c4f816121e2565b826001600160a01b0316826001600160a01b031614610c4f57610c4f8282612291565b611fc383836122d5565b611fd06000848484612038565b610c4f5760405162461bcd60e51b8152600401610a3990613562565b600081604051602001611fff91906133fe565b604051602081830303815290604052805190602001209050919050565b600080600061202b85856123c3565b91509150610e6c81612433565b60006001600160a01b0384163b1561213a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061207c903390899088908890600401613479565b602060405180830381600087803b15801561209657600080fd5b505af19250505080156120c6575060408051601f3d908101601f191682019092526120c3918101906129f8565b60015b612120573d8080156120f4576040519150601f19603f3d011682016040523d82523d6000602084013e6120f9565b606091505b5080516121185760405162461bcd60e51b8152600401610a3990613562565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ac4565b506001949350505050565b6000600161215284611020565b61215c91906137e1565b6000838152600760205260409020549091508082146121af576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121f4906001906137e1565b6000838152600960205260408120546008805493945090928490811061221c5761221c61394a565b90600052602060002001549050806008838154811061223d5761223d61394a565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061227557612275613934565b6001900381819060005260206000200160009055905550505050565b600061229c83611020565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166122fb5760405162461bcd60e51b8152600401610a3990613642565b6000818152600260205260409020546001600160a01b0316156123305760405162461bcd60e51b8152600401610a3990613592565b61233c60008383611f01565b6001600160a01b0382166000908152600360205260408120805460019290612365908490613796565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000808251604114156123fa5760208301516040840151606085015160001a6123ee87828585612518565b9450945050505061242c565b82516040141561242457602083015160408401516124198683836125f8565b93509350505061242c565b506000905060025b9250929050565b600081600481111561244757612447613908565b14156124505750565b600181600481111561246457612464613908565b14156124825760405162461bcd60e51b8152600401610a3990613522565b600281600481111561249657612496613908565b14156124b45760405162461bcd60e51b8152600401610a3990613542565b60038160048111156124c8576124c8613908565b14156124e65760405162461bcd60e51b8152600401610a39906135c2565b60048160048111156124fa576124fa613908565b1415610db45760405162461bcd60e51b8152600401610a3990613632565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561254f57506000905060036125ef565b8460ff16601b1415801561256757508460ff16601c14155b1561257857506000905060046125ef565b60006001878787876040516000815260200160405260405161259d94939291906134dc565b6020604051602081039080840390855afa1580156125bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166125e8576000600192509250506125ef565b9150600090505b94509492505050565b6000806001600160ff1b0383168161261560ff86901c601b613796565b905061262387828885612518565b935093505050935093915050565b82805461263d90613841565b90600052602060002090601f01602090048101928261265f57600085556126a5565b82601f1061267857805160ff19168380011785556126a5565b828001600101855582156126a5579182015b828111156126a557825182559160200191906001019061268a565b506126b19291506126b5565b5090565b5b808211156126b157600081556001016126b6565b60006126dd6126d884613747565b613730565b905080838252602082019050828560208602820111156126ff576126ff600080fd5b60005b8581101561272b57816127158882612769565b8452506020928301929190910190600101612702565b5050509392505050565b60006127436126d88461376b565b90508281526020810184848401111561275e5761275e600080fd5b610e6c848285613809565b8035610a0981613976565b600082601f83011261278857612788600080fd5b8135611ac48482602086016126ca565b8035610a098161398a565b8035610a0981613992565b8051610a0981613992565b600082601f8301126127cd576127cd600080fd5b8135611ac4848260208601612735565b8035610a09816139a2565b6000602082840312156127fd576127fd600080fd5b6000611ac48484612769565b6000806040838503121561281f5761281f600080fd5b600061282b8585612769565b925050602061283c85828601612769565b9150509250929050565b60008060006060848603121561285e5761285e600080fd5b600061286a8686612769565b935050602061287b86828701612769565b925050604061288c868287016127dd565b9150509250925092565b600080600080608085870312156128af576128af600080fd5b60006128bb8787612769565b94505060206128cc87828801612769565b93505060406128dd878288016127dd565b925050606085013567ffffffffffffffff8111156128fd576128fd600080fd5b612909878288016127b9565b91505092959194509250565b6000806040838503121561292b5761292b600080fd5b60006129378585612769565b925050602061283c85828601612798565b6000806040838503121561295e5761295e600080fd5b600061296a8585612769565b925050602061283c858286016127dd565b60006020828403121561299057612990600080fd5b813567ffffffffffffffff8111156129aa576129aa600080fd5b611ac484828501612774565b6000602082840312156129cb576129cb600080fd5b6000611ac48484612798565b6000602082840312156129ec576129ec600080fd5b6000611ac484846127a3565b600060208284031215612a0d57612a0d600080fd5b6000611ac484846127ae565b600060208284031215612a2e57612a2e600080fd5b813567ffffffffffffffff811115612a4857612a48600080fd5b611ac4848285016127b9565b600060208284031215612a6957612a69600080fd5b6000611ac484846127dd565b60008060408385031215612a8b57612a8b600080fd5b600061282b85856127dd565b60008060408385031215612aad57612aad600080fd5b6000612ab985856127dd565b925050602083013567ffffffffffffffff811115612ad957612ad9600080fd5b61283c858286016127b9565b6000612af18383612b6a565b505060200190565b612b02816137f8565b82525050565b612b02612b14826137f8565b6138b6565b6000612b23825190565b80845260209384019383018060005b83811015612b57578151612b468882612ae5565b975060208301925050600101612b32565b509495945050505050565b801515612b02565b80612b02565b6000612b7a825190565b808452602084019350612b91818560208601613815565b601f01601f19169290920192915050565b6000612bac825190565b612bba818560208601613815565b9290920192915050565b60008154612bd181613841565b600182168015612be85760018114612bf957612c29565b60ff19831686528186019350612c29565b60008581526020902060005b83811015612c2157815488820152600190910190602001612c05565b838801955050505b50505092915050565b601881526000602082017f45434453413a20696e76616c6964207369676e61747572650000000000000000815291505b5060200190565b601881526000602082017f53616c6520686173206e6f74207374617274656420796574000000000000000081529150612c62565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150612c62565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150612d15565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612d15565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150612d15565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150612c62565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150612d15565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150612c62565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150612d15565b602881526000602082017f6d6178206d696e7420616d6f756e7420706572207472616e73616374696f6e20815267195e18d95959195960c21b60208201529150612d15565b602c81526000602082017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b60208201529150612d15565b603881526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529150612d15565b602a81526000602082017f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b60208201529150612d15565b602981526000602082017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b60208201529150612d15565b60168152600060208201751b585e08139195081b1a5b5a5d08195e18d95959195960521b81529150612c62565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150612d15565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612c62565b602c81526000602082017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b60208201529150612d15565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612c62565b60168152600060208201751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b81529150612c62565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b60208201529150612d15565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150612d15565b6012815260006020820171696e73756666696369656e742066756e647360701b81529150612c62565b603181526000602082017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60208201529150612d15565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150612d15565b601081526000602082016f12de58c81b9bdd08185c1c1c9bdd995960821b81529150612c62565b60118152600060208201701d5cd95c881a5b88189b1858dadb1a5cdd607a1b81529150612c62565b601781526000602082017f75736572206973206e6f742077686974656c697374656400000000000000000081529150612c62565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612c62565b601b81526000602082017f6e65656420746f206d696e74206174206c656173742031204e4654000000000081529150612c62565b60ff8116612b02565b60006133dd8286612ba2565b91506133e98285612ba2565b91506133f58284612bc4565b95945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0160006134308284612b6a565b50602001919050565b6b1ade58c8185c1c1c9bdd995960a21b8152600c01600061345a8284612b08565b50601401919050565b600081610a09565b60208101610a098284612af9565b608081016134878287612af9565b6134946020830186612af9565b6134a16040830185612b6a565b81810360608301526134b38184612b70565b9695505050505050565b602080825281016116668184612b19565b60208101610a098284612b62565b608081016134ea8287612b6a565b6134f760208301866133c8565b6135046040830185612b6a565b6133f56060830184612b6a565b602080825281016116668184612b70565b60208082528101610a0981612c32565b60208082528101610a0981612c69565b60208082528101610a0981612c9d565b60208082528101610a0981612cd1565b60208082528101610a0981612d1c565b60208082528101610a0981612d6b565b60208082528101610a0981612dae565b60208082528101610a0981612df0565b60208082528101610a0981612e24565b60208082528101610a0981612e65565b60208082528101610a0981612e99565b60208082528101610a0981612ed8565b60208082528101610a0981612f1d565b60208082528101610a0981612f66565b60208082528101610a0981612fc0565b60208082528101610a0981613007565b60208082528101610a098161304d565b60208082528101610a098161307a565b60208082528101610a09816130b9565b60208082528101610a09816130eb565b60208082528101610a0981613134565b60208082528101610a0981613166565b60208082528101610a0981613193565b60208082528101610a09816131df565b60208082528101610a098161321d565b60208082528101610a0981613246565b60208082528101610a0981613294565b60208082528101610a09816132dd565b60208082528101610a0981613304565b60208082528101610a098161332c565b60208082528101610a0981613360565b60208082528101610a0981613394565b60208101610a098284612b6a565b600061373b60405190565b905061166d828261386e565b600067ffffffffffffffff82111561376157613761613960565b5060209081020190565b600067ffffffffffffffff82111561378557613785613960565b601f19601f83011660200192915050565b600082198211156137a9576137a96138dc565b500190565b6000826137bd576137bd6138f2565b500490565b60008160001904831182151516156137dc576137dc6138dc565b500290565b6000828210156137f3576137f36138dc565b500390565b60006001600160a01b038216610a09565b82818337506000910152565b60005b83811015613830578181015183820152602001613818565b838111156111f95750506000910152565b60028104600182168061385557607f821691505b602082108114156138685761386861391e565b50919050565b601f19601f830116810181811067ffffffffffffffff8211171561389457613894613960565b6040525050565b60006000198214156138af576138af6138dc565b5060010190565b6000610a09826000610a098260601b90565b6000826138d7576138d76138f2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61397f816137f8565b8114610db457600080fd5b80151561397f565b6001600160e01b0319811661397f565b8061397f56fea2646970667358221220a47e41705dccc9518261998919aad199bb7f7c07e4c992eecd5cd9a5d102add764736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103355760003560e01c80636f9fb98a116101ab578063b423fe67116100f7578063da3ef23f11610095578063efd0cbf91161006f578063efd0cbf914610958578063f2c4ce1e1461096b578063f2fde38b1461098b578063fe575a87146109ab57600080fd5b8063da3ef23f146108cf578063e985e9c5146108ef578063edec5f271461093857600080fd5b8063bc8893b4116100d1578063bc8893b414610865578063c668286214610884578063c87b56dd14610899578063d5abeb01146108b957600080fd5b8063b423fe6714610805578063b88d4fde14610825578063bb3d676a1461084557600080fd5b806383a076be116101645780638da5cb5b1161013e5780638da5cb5b1461079d57806395d89b41146107bb578063a22cb465146107d0578063a475b5dd146107f057600080fd5b806383a076be1461074a5780638895283f1461076a5780638b9a10d71461078a57600080fd5b80636f9fb98a146106b657806370a08231146106cb578063714c5398146106eb578063715018a6146107005780637ac3c02f146107155780637f00c7a61461072a57600080fd5b80633af32abf1161028557806351830227116102235780635c975abb116101fd5780635c975abb146106365780636352211e146106565780636c19e783146106765780636f8b44b01461069657600080fd5b806351830227146105db57806353135ca0146105fc57806355f804b31461061657600080fd5b806342842e0e1161025f57806342842e0e1461054e578063438b63001461056e57806344a0d68a1461059b5780634f6ccce7146105bb57600080fd5b80633af32abf146104eb5780633ccfd60b146105245780633e4191dc1461052c57600080fd5b806313faede6116102f2578063238ac933116102cc578063238ac9331461046e578063239c70ae1461049557806323b872dd146104ab5780632f745c59146104cb57600080fd5b806313faede614610416578063150909f71461043957806318160ddd1461045957600080fd5b806301ffc9a71461033a57806302329a291461037057806306fdde0314610392578063081812fc146103b4578063081c8c44146103e1578063095ea7b3146103f6575b600080fd5b34801561034657600080fd5b5061035a6103553660046129d7565b6109e4565b60405161036791906134ce565b60405180910390f35b34801561037c57600080fd5b5061039061038b3660046129b6565b610a0f565b005b34801561039e57600080fd5b506103a7610a5e565b6040516103679190613511565b3480156103c057600080fd5b506103d46103cf366004612a54565b610af0565b604051610367919061346b565b3480156103ed57600080fd5b506103a7610b40565b34801561040257600080fd5b50610390610411366004612948565b610bce565b34801561042257600080fd5b5061042c600f5481565b6040516103679190613722565b34801561044557600080fd5b506103906104543660046129b6565b610c54565b34801561046557600080fd5b5060085461042c565b34801561047a57600080fd5b506012546103d490600160281b90046001600160a01b031681565b3480156104a157600080fd5b5061042c60115481565b3480156104b757600080fd5b506103906104c6366004612846565b610c9e565b3480156104d757600080fd5b5061042c6104e6366004612948565b610ccf565b3480156104f757600080fd5b5061035a6105063660046127e8565b6001600160a01b031660009081526013602052604090205460ff1690565b610390610d21565b34801561053857600080fd5b5060125461035a90640100000000900460ff1681565b34801561055a57600080fd5b50610390610569366004612846565b610db7565b34801561057a57600080fd5b5061058e6105893660046127e8565b610dd2565b60405161036791906134bd565b3480156105a757600080fd5b506103906105b6366004612a54565b610e74565b3480156105c757600080fd5b5061042c6105d6366004612a54565b610ea3565b3480156105e757600080fd5b5060125461035a906301000000900460ff1681565b34801561060857600080fd5b5060125461035a9060ff1681565b34801561062257600080fd5b50610390610631366004612a19565b610ef1565b34801561064257600080fd5b5060125461035a9062010000900460ff1681565b34801561066257600080fd5b506103d4610671366004612a54565b610f32565b34801561068257600080fd5b506103906106913660046127e8565b610f67565b3480156106a257600080fd5b506103906106b1366004612a54565b610fbf565b3480156106c257600080fd5b5061042c610fee565b3480156106d757600080fd5b5061042c6106e63660046127e8565b611020565b3480156106f757600080fd5b506103a7611064565b34801561070c57600080fd5b5061039061109e565b34801561072157600080fd5b506103d46110d4565b34801561073657600080fd5b50610390610745366004612a54565b611118565b34801561075657600080fd5b50610390610765366004612a75565b611147565b34801561077657600080fd5b506103906107853660046129b6565b6111ff565b610390610798366004612a97565b61123c565b3480156107a957600080fd5b50600a546001600160a01b03166103d4565b3480156107c757600080fd5b506103a76113c6565b3480156107dc57600080fd5b506103906107eb366004612915565b6113d5565b3480156107fc57600080fd5b506103906113e0565b34801561081157600080fd5b506103906108203660046129b6565b61141f565b34801561083157600080fd5b50610390610840366004612896565b611463565b34801561085157600080fd5b5061039061086036600461297b565b611495565b34801561087157600080fd5b5060125461035a90610100900460ff1681565b34801561089057600080fd5b506103a7611527565b3480156108a557600080fd5b506103a76108b4366004612a54565b611534565b3480156108c557600080fd5b5061042c60105481565b3480156108db57600080fd5b506103906108ea366004612a19565b611672565b3480156108fb57600080fd5b5061035a61090a366004612809565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561094457600080fd5b5061039061095336600461297b565b6116af565b610390610966366004612a54565b611741565b34801561097757600080fd5b50610390610986366004612a19565b6118c6565b34801561099757600080fd5b506103906109a63660046127e8565b611903565b3480156109b757600080fd5b5061035a6109c63660046127e8565b6001600160a01b031660009081526014602052604090205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610a095750610a098261195c565b92915050565b600a546001600160a01b03163314610a425760405162461bcd60e51b8152600401610a3990613662565b60405180910390fd5b60128054911515620100000262ff000019909216919091179055565b606060008054610a6d90613841565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9990613841565b8015610ae65780601f10610abb57610100808354040283529160200191610ae6565b820191906000526020600020905b815481529060010190602001808311610ac957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b245760405162461bcd60e51b8152600401610a3990613652565b506000908152600460205260409020546001600160a01b031690565b600e8054610b4d90613841565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7990613841565b8015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bd982610f32565b9050806001600160a01b0316836001600160a01b03161415610c0d5760405162461bcd60e51b8152600401610a3990613692565b336001600160a01b0382161480610c295750610c29813361090a565b610c455760405162461bcd60e51b8152600401610a39906135f2565b610c4f83836119ac565b505050565b600a546001600160a01b03163314610c7e5760405162461bcd60e51b8152600401610a3990613662565b601280549115156401000000000264ff0000000019909216919091179055565b610ca83382611a1a565b610cc45760405162461bcd60e51b8152600401610a39906136b2565b610c4f838383611acc565b6000610cda83611020565b8210610cf85760405162461bcd60e51b8152600401610a3990613552565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610d4b5760405162461bcd60e51b8152600401610a3990613662565b6000336001600160a01b031647604051610d6490613463565b60006040518083038185875af1925050503d8060008114610da1576040519150601f19603f3d011682016040523d82523d6000602084013e610da6565b606091505b5050905080610db457600080fd5b50565b610c4f83838360405180602001604052806000815250611463565b60606000610ddf83611020565b905060008167ffffffffffffffff811115610dfc57610dfc613960565b604051908082528060200260200182016040528015610e25578160200160208202803683370190505b50905060005b82811015610e6c57610e3d8582610ccf565b828281518110610e4f57610e4f61394a565b602090810291909101015280610e648161389b565b915050610e2b565b509392505050565b600a546001600160a01b03163314610e9e5760405162461bcd60e51b8152600401610a3990613662565b600f55565b6000610eae60085490565b8210610ecc5760405162461bcd60e51b8152600401610a39906136c2565b60088281548110610edf57610edf61394a565b90600052602060002001549050919050565b600a546001600160a01b03163314610f1b5760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600c906020840190612631565b5050565b6000818152600260205260408120546001600160a01b031680610a095760405162461bcd60e51b8152600401610a3990613612565b600a546001600160a01b03163314610f915760405162461bcd60e51b8152600401610a3990613662565b601280546001600160a01b03909216600160281b0265010000000000600160c81b0319909216919091179055565b600a546001600160a01b03163314610fe95760405162461bcd60e51b8152600401610a3990613662565b601055565b600a546000906001600160a01b0316331461101b5760405162461bcd60e51b8152600401610a3990613662565b504790565b60006001600160a01b0382166110485760405162461bcd60e51b8152600401610a3990613602565b506001600160a01b031660009081526003602052604090205490565b600a546060906001600160a01b031633146110915760405162461bcd60e51b8152600401610a3990613662565b600c8054610a6d90613841565b600a546001600160a01b031633146110c85760405162461bcd60e51b8152600401610a3990613662565b6110d26000611bf9565b565b600a546000906001600160a01b031633146111015760405162461bcd60e51b8152600401610a3990613662565b50601254600160281b90046001600160a01b031690565b600a546001600160a01b031633146111425760405162461bcd60e51b8152600401610a3990613662565b601155565b600a546001600160a01b031633146111715760405162461bcd60e51b8152600401610a3990613662565b600082116111915760405162461bcd60e51b8152600401610a3990613712565b600061119c60085490565b6010549091506111ac8483613796565b11156111ca5760405162461bcd60e51b8152600401610a3990613622565b60015b8381116111f9576111e7836111e28385613796565b611c4b565b806111f18161389b565b9150506111cd565b50505050565b600a546001600160a01b031633146112295760405162461bcd60e51b8152600401610a3990613662565b6012805460ff1916911515919091179055565b60125462010000900460ff16156112655760405162461bcd60e51b8152600401610a3990613672565b6002600b5414156112885760405162461bcd60e51b8152600401610a3990613702565b6002600b553360008181526014602052604090205460ff16156112bd5760405162461bcd60e51b8152600401610a39906136e2565b60125460ff166112df5760405162461bcd60e51b8152600401610a3990613532565b82600f546112ed91906137c2565b34101561130c5760405162461bcd60e51b8152600401610a39906136a2565b6000831161132c5760405162461bcd60e51b8152600401610a3990613712565b60115483111561134e5760405162461bcd60e51b8152600401610a39906135d2565b600061135960085490565b6010549091506113698583613796565b11156113875760405162461bcd60e51b8152600401610a3990613622565b61139083611c65565b60015b8481116113ba576113a8336111e28385613796565b806113b28161389b565b915050611393565b50506001600b55505050565b606060018054610a6d90613841565b610f2e338383611d1e565b600a546001600160a01b0316331461140a5760405162461bcd60e51b8152600401610a3990613662565b6012805463ff00000019166301000000179055565b600a546001600160a01b031633146114495760405162461bcd60e51b8152600401610a3990613662565b601280549115156101000261ff0019909216919091179055565b61146d3383611a1a565b6114895760405162461bcd60e51b8152600401610a39906136b2565b6111f984848484611dc1565b600a546001600160a01b031633146114bf5760405162461bcd60e51b8152600401610a3990613662565b60005b8151811015610f2e576001601460008484815181106114e3576114e361394a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061151f8161389b565b9150506114c2565b600d8054610b4d90613841565b6000818152600260205260409020546060906001600160a01b031661156b5760405162461bcd60e51b8152600401610a3990613682565b6012546301000000900460ff1661160e57600e805461158990613841565b80601f01602080910402602001604051908101604052809291908181526020018280546115b590613841565b80156116025780601f106115d757610100808354040283529160200191611602565b820191906000526020600020905b8154815290600101906020018083116115e557829003601f168201915b50505050509050919050565b6000611618611df4565b905060008151116116385760405180602001604052806000815250611666565b8061164284611e03565b600d604051602001611656939291906133d1565b6040516020818303038152906040525b9392505050565b919050565b600a546001600160a01b0316331461169c5760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600d906020840190612631565b600a546001600160a01b031633146116d95760405162461bcd60e51b8152600401610a3990613662565b60005b8151811015610f2e576001601360008484815181106116fd576116fd61394a565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806117398161389b565b9150506116dc565b60125462010000900460ff161561176a5760405162461bcd60e51b8152600401610a3990613672565b6002600b54141561178d5760405162461bcd60e51b8152600401610a3990613702565b6002600b553360008181526014602052604090205460ff16156117c25760405162461bcd60e51b8152600401610a39906136e2565b601254610100900460ff166117e95760405162461bcd60e51b8152600401610a3990613532565b81600f546117f791906137c2565b3410156118165760405162461bcd60e51b8152600401610a39906136a2565b600082116118365760405162461bcd60e51b8152600401610a3990613712565b6011548211156118585760405162461bcd60e51b8152600401610a39906135d2565b600061186360085490565b6010549091506118738483613796565b11156118915760405162461bcd60e51b8152600401610a3990613622565b60015b8381116118bb576118a9336111e28385613796565b806118b38161389b565b915050611894565b50506001600b555050565b600a546001600160a01b031633146118f05760405162461bcd60e51b8152600401610a3990613662565b8051610f2e90600e906020840190612631565b600a546001600160a01b0316331461192d5760405162461bcd60e51b8152600401610a3990613662565b6001600160a01b0381166119535760405162461bcd60e51b8152600401610a3990613572565b610db481611bf9565b60006001600160e01b031982166380ac58cd60e01b148061198d57506001600160e01b03198216635b5e139f60e01b145b80610a0957506301ffc9a760e01b6001600160e01b0319831614610a09565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119e182610f32565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a4e5760405162461bcd60e51b8152600401610a39906135e2565b6000611a5983610f32565b9050806001600160a01b0316846001600160a01b03161480611a945750836001600160a01b0316611a8984610af0565b6001600160a01b0316145b80611ac457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611adf82610f32565b6001600160a01b031614611b055760405162461bcd60e51b8152600401610a3990613582565b6001600160a01b038216611b2b5760405162461bcd60e51b8152600401610a39906135a2565b611b36838383611f01565b611b416000826119ac565b6001600160a01b0383166000908152600360205260408120805460019290611b6a9084906137e1565b90915550506001600160a01b0382166000908152600360205260408120805460019290611b98908490613796565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610f2e828260405180602001604052806000815250611fb9565b3360009081526013602052604090205460ff16611c945760405162461bcd60e51b8152600401610a39906136f2565b601254640100000000900460ff1615610db457600033604051602001611cba9190613439565b6040516020818303038152906040528051906020012090506000611ce783611ce184611fec565b9061201c565b6012549091506001600160a01b03808316600160281b9092041614610c4f5760405162461bcd60e51b8152600401610a39906136d2565b816001600160a01b0316836001600160a01b03161415611d505760405162461bcd60e51b8152600401610a39906135b2565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611db49085906134ce565b60405180910390a3505050565b611dcc848484611acc565b611dd884848484612038565b6111f95760405162461bcd60e51b8152600401610a3990613562565b6060600c8054610a6d90613841565b606081611e275750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e515780611e3b8161389b565b9150611e4a9050600a836137ae565b9150611e2b565b60008167ffffffffffffffff811115611e6c57611e6c613960565b6040519080825280601f01601f191660200182016040528015611e96576020820181803683370190505b5090505b8415611ac457611eab6001836137e1565b9150611eb8600a866138c8565b611ec3906030613796565b60f81b818381518110611ed857611ed861394a565b60200101906001600160f81b031916908160001a905350611efa600a866137ae565b9450611e9a565b6001600160a01b038316611f5c57611f5781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611f7f565b816001600160a01b0316836001600160a01b031614611f7f57611f7f8382612145565b6001600160a01b038216611f9657610c4f816121e2565b826001600160a01b0316826001600160a01b031614610c4f57610c4f8282612291565b611fc383836122d5565b611fd06000848484612038565b610c4f5760405162461bcd60e51b8152600401610a3990613562565b600081604051602001611fff91906133fe565b604051602081830303815290604052805190602001209050919050565b600080600061202b85856123c3565b91509150610e6c81612433565b60006001600160a01b0384163b1561213a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061207c903390899088908890600401613479565b602060405180830381600087803b15801561209657600080fd5b505af19250505080156120c6575060408051601f3d908101601f191682019092526120c3918101906129f8565b60015b612120573d8080156120f4576040519150601f19603f3d011682016040523d82523d6000602084013e6120f9565b606091505b5080516121185760405162461bcd60e51b8152600401610a3990613562565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ac4565b506001949350505050565b6000600161215284611020565b61215c91906137e1565b6000838152600760205260409020549091508082146121af576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121f4906001906137e1565b6000838152600960205260408120546008805493945090928490811061221c5761221c61394a565b90600052602060002001549050806008838154811061223d5761223d61394a565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061227557612275613934565b6001900381819060005260206000200160009055905550505050565b600061229c83611020565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166122fb5760405162461bcd60e51b8152600401610a3990613642565b6000818152600260205260409020546001600160a01b0316156123305760405162461bcd60e51b8152600401610a3990613592565b61233c60008383611f01565b6001600160a01b0382166000908152600360205260408120805460019290612365908490613796565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000808251604114156123fa5760208301516040840151606085015160001a6123ee87828585612518565b9450945050505061242c565b82516040141561242457602083015160408401516124198683836125f8565b93509350505061242c565b506000905060025b9250929050565b600081600481111561244757612447613908565b14156124505750565b600181600481111561246457612464613908565b14156124825760405162461bcd60e51b8152600401610a3990613522565b600281600481111561249657612496613908565b14156124b45760405162461bcd60e51b8152600401610a3990613542565b60038160048111156124c8576124c8613908565b14156124e65760405162461bcd60e51b8152600401610a39906135c2565b60048160048111156124fa576124fa613908565b1415610db45760405162461bcd60e51b8152600401610a3990613632565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561254f57506000905060036125ef565b8460ff16601b1415801561256757508460ff16601c14155b1561257857506000905060046125ef565b60006001878787876040516000815260200160405260405161259d94939291906134dc565b6020604051602081039080840390855afa1580156125bf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166125e8576000600192509250506125ef565b9150600090505b94509492505050565b6000806001600160ff1b0383168161261560ff86901c601b613796565b905061262387828885612518565b935093505050935093915050565b82805461263d90613841565b90600052602060002090601f01602090048101928261265f57600085556126a5565b82601f1061267857805160ff19168380011785556126a5565b828001600101855582156126a5579182015b828111156126a557825182559160200191906001019061268a565b506126b19291506126b5565b5090565b5b808211156126b157600081556001016126b6565b60006126dd6126d884613747565b613730565b905080838252602082019050828560208602820111156126ff576126ff600080fd5b60005b8581101561272b57816127158882612769565b8452506020928301929190910190600101612702565b5050509392505050565b60006127436126d88461376b565b90508281526020810184848401111561275e5761275e600080fd5b610e6c848285613809565b8035610a0981613976565b600082601f83011261278857612788600080fd5b8135611ac48482602086016126ca565b8035610a098161398a565b8035610a0981613992565b8051610a0981613992565b600082601f8301126127cd576127cd600080fd5b8135611ac4848260208601612735565b8035610a09816139a2565b6000602082840312156127fd576127fd600080fd5b6000611ac48484612769565b6000806040838503121561281f5761281f600080fd5b600061282b8585612769565b925050602061283c85828601612769565b9150509250929050565b60008060006060848603121561285e5761285e600080fd5b600061286a8686612769565b935050602061287b86828701612769565b925050604061288c868287016127dd565b9150509250925092565b600080600080608085870312156128af576128af600080fd5b60006128bb8787612769565b94505060206128cc87828801612769565b93505060406128dd878288016127dd565b925050606085013567ffffffffffffffff8111156128fd576128fd600080fd5b612909878288016127b9565b91505092959194509250565b6000806040838503121561292b5761292b600080fd5b60006129378585612769565b925050602061283c85828601612798565b6000806040838503121561295e5761295e600080fd5b600061296a8585612769565b925050602061283c858286016127dd565b60006020828403121561299057612990600080fd5b813567ffffffffffffffff8111156129aa576129aa600080fd5b611ac484828501612774565b6000602082840312156129cb576129cb600080fd5b6000611ac48484612798565b6000602082840312156129ec576129ec600080fd5b6000611ac484846127a3565b600060208284031215612a0d57612a0d600080fd5b6000611ac484846127ae565b600060208284031215612a2e57612a2e600080fd5b813567ffffffffffffffff811115612a4857612a48600080fd5b611ac4848285016127b9565b600060208284031215612a6957612a69600080fd5b6000611ac484846127dd565b60008060408385031215612a8b57612a8b600080fd5b600061282b85856127dd565b60008060408385031215612aad57612aad600080fd5b6000612ab985856127dd565b925050602083013567ffffffffffffffff811115612ad957612ad9600080fd5b61283c858286016127b9565b6000612af18383612b6a565b505060200190565b612b02816137f8565b82525050565b612b02612b14826137f8565b6138b6565b6000612b23825190565b80845260209384019383018060005b83811015612b57578151612b468882612ae5565b975060208301925050600101612b32565b509495945050505050565b801515612b02565b80612b02565b6000612b7a825190565b808452602084019350612b91818560208601613815565b601f01601f19169290920192915050565b6000612bac825190565b612bba818560208601613815565b9290920192915050565b60008154612bd181613841565b600182168015612be85760018114612bf957612c29565b60ff19831686528186019350612c29565b60008581526020902060005b83811015612c2157815488820152600190910190602001612c05565b838801955050505b50505092915050565b601881526000602082017f45434453413a20696e76616c6964207369676e61747572650000000000000000815291505b5060200190565b601881526000602082017f53616c6520686173206e6f74207374617274656420796574000000000000000081529150612c62565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150612c62565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150612d15565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612d15565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150612d15565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150612c62565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150612d15565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150612c62565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150612d15565b602881526000602082017f6d6178206d696e7420616d6f756e7420706572207472616e73616374696f6e20815267195e18d95959195960c21b60208201529150612d15565b602c81526000602082017f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b60208201529150612d15565b603881526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7781527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060208201529150612d15565b602a81526000602082017f4552433732313a2062616c616e636520717565727920666f7220746865207a65815269726f206164647265737360b01b60208201529150612d15565b602981526000602082017f4552433732313a206f776e657220717565727920666f72206e6f6e657869737481526832b73a103a37b5b2b760b91b60208201529150612d15565b60168152600060208201751b585e08139195081b1a5b5a5d08195e18d95959195960521b81529150612c62565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150612d15565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612c62565b602c81526000602082017f4552433732313a20617070726f76656420717565727920666f72206e6f6e657881526b34b9ba32b73a103a37b5b2b760a11b60208201529150612d15565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612c62565b60168152600060208201751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b81529150612c62565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b60208201529150612d15565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150612d15565b6012815260006020820171696e73756666696369656e742066756e647360701b81529150612c62565b603181526000602082017f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f8152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60208201529150612d15565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150612d15565b601081526000602082016f12de58c81b9bdd08185c1c1c9bdd995960821b81529150612c62565b60118152600060208201701d5cd95c881a5b88189b1858dadb1a5cdd607a1b81529150612c62565b601781526000602082017f75736572206973206e6f742077686974656c697374656400000000000000000081529150612c62565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612c62565b601b81526000602082017f6e65656420746f206d696e74206174206c656173742031204e4654000000000081529150612c62565b60ff8116612b02565b60006133dd8286612ba2565b91506133e98285612ba2565b91506133f58284612bc4565b95945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c0160006134308284612b6a565b50602001919050565b6b1ade58c8185c1c1c9bdd995960a21b8152600c01600061345a8284612b08565b50601401919050565b600081610a09565b60208101610a098284612af9565b608081016134878287612af9565b6134946020830186612af9565b6134a16040830185612b6a565b81810360608301526134b38184612b70565b9695505050505050565b602080825281016116668184612b19565b60208101610a098284612b62565b608081016134ea8287612b6a565b6134f760208301866133c8565b6135046040830185612b6a565b6133f56060830184612b6a565b602080825281016116668184612b70565b60208082528101610a0981612c32565b60208082528101610a0981612c69565b60208082528101610a0981612c9d565b60208082528101610a0981612cd1565b60208082528101610a0981612d1c565b60208082528101610a0981612d6b565b60208082528101610a0981612dae565b60208082528101610a0981612df0565b60208082528101610a0981612e24565b60208082528101610a0981612e65565b60208082528101610a0981612e99565b60208082528101610a0981612ed8565b60208082528101610a0981612f1d565b60208082528101610a0981612f66565b60208082528101610a0981612fc0565b60208082528101610a0981613007565b60208082528101610a098161304d565b60208082528101610a098161307a565b60208082528101610a09816130b9565b60208082528101610a09816130eb565b60208082528101610a0981613134565b60208082528101610a0981613166565b60208082528101610a0981613193565b60208082528101610a09816131df565b60208082528101610a098161321d565b60208082528101610a0981613246565b60208082528101610a0981613294565b60208082528101610a09816132dd565b60208082528101610a0981613304565b60208082528101610a098161332c565b60208082528101610a0981613360565b60208082528101610a0981613394565b60208101610a098284612b6a565b600061373b60405190565b905061166d828261386e565b600067ffffffffffffffff82111561376157613761613960565b5060209081020190565b600067ffffffffffffffff82111561378557613785613960565b601f19601f83011660200192915050565b600082198211156137a9576137a96138dc565b500190565b6000826137bd576137bd6138f2565b500490565b60008160001904831182151516156137dc576137dc6138dc565b500290565b6000828210156137f3576137f36138dc565b500390565b60006001600160a01b038216610a09565b82818337506000910152565b60005b83811015613830578181015183820152602001613818565b838111156111f95750506000910152565b60028104600182168061385557607f821691505b602082108114156138685761386861391e565b50919050565b601f19601f830116810181811067ffffffffffffffff8211171561389457613894613960565b6040525050565b60006000198214156138af576138af6138dc565b5060010190565b6000610a09826000610a098260601b90565b6000826138d7576138d76138f2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61397f816137f8565b8114610db457600080fd5b80151561397f565b6001600160e01b0319811661397f565b8061397f56fea2646970667358221220a47e41705dccc9518261998919aad199bb7f7c07e4c992eecd5cd9a5d102add764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 176,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 180,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 184,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 190,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1159,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1163,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1166,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2911,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2914,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "baseExtension",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2916,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2919,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "cost",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2922,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2925,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2928,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "presaleActive",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2931,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "publicSaleActive",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2934,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "paused",
        "offset": 2,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2937,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "revealed",
        "offset": 3,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2940,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "isKycRequired",
        "offset": 4,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2942,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "signer",
        "offset": 5,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 2946,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2950,
        "contract": "contracts/NFTiff.sol:NFTiff",
        "label": "blacklistedAddresses",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}